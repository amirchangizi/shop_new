<?php

namespace app\modules\usermanagement\models;

use Yii ;
use yii\helpers\Url;
use app\models\Modules;
use yii\db\ActiveRecord;
use yii\web\UploadedFile;
use yii\web\IdentityInterface;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%users}}".
 *
 * @property string $user_id
 * @property string $parent_id
 * @property string $name
 * @property string $username
 * @property string $password
 * @property string $password_reset_token
 * @property string $user_image
 * @property string $email
 * @property integer $block
 * @property integer $age
 * @property string $joined_time
 * @property string $about_me
 *
 * @property Modules[] $modules
 * @property Modules[] $modules0
 * @property UsergroupMap[] $usergroupMaps
 * @property User $parent
 * @property User[] $users
 * @property Widgets[] $widgets
 * @property Widgets[] $widgets0
 */
class User extends ActiveRecord implements IdentityInterface
{

    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 1;

    const SCENARIO_REGISTER = 'signup';

    const SCENARIO_EDITPROFILE = 'editprofile';

    const SCENARIO_ADMINEDITPROFILE = 'admineditprofile';

    const SCENARIO_SETPASSWORD = 'setpassword';

    const EVENT_REGISTER = 'register';

    public $repeat_password;

    public $userModule ;

    public $accept , $imageFile;

    public function scenarios()
    {
        return [
            'default' => ['name', 'username', 'password', 'email' ,'age' ,'parent_id' ,'block' ,'user_image' ,'about_me'],
            self::SCENARIO_REGISTER => ['name', 'username', 'password', 'email','repeat_password' ,'age' ,'parent_id' ,'block' ,'user_image' ,'about_me','joined_time'],
            self::SCENARIO_EDITPROFILE => ['name', 'username', 'password', 'email','repeat_password' ,'age' ,'parent_id' ,'block' ,'user_image' ,'about_me','joined_time'],
            self::SCENARIO_ADMINEDITPROFILE => ['name', 'username', 'email','age' ,'parent_id' ,'block' ,'user_image' ,'about_me','joined_time'],
            self::SCENARIO_SETPASSWORD => ['name', 'username', 'password', 'email','repeat_password' ,'age' ,'parent_id' ,'block' ,'user_image' ,'about_me','joined_time'] ,

        ];
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'joined_time',
                'updatedAtAttribute' => false,
                'value' => time(),
            ],

        ];
    }

    public function init()
    {
        return parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return Yii::$app->getModule('usermanagement')->user_table;
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'username', 'password', 'email','repeat_password'], 'required', 'on' => self::SCENARIO_REGISTER],
            [['name', 'username', 'password', 'email','repeat_password'], 'required', 'on' => self::SCENARIO_EDITPROFILE],
            [['name', 'username', 'email'], 'required', 'on' => self::SCENARIO_ADMINEDITPROFILE],
            [['password','repeat_password'], 'required', 'on' => self::SCENARIO_SETPASSWORD],

            [['imageFile'], 'file', 'skipOnEmpty' => false, 'extensions' => 'png, jpg'],
            [['username' ,'password' ,'repeat_password' ], 'match', 'pattern' => '/^[A-Za-z0-9_~\-@\\^\(\)]+$/'] ,

            [['name', 'email','username'], 'unique'],
            [['parent_id', 'block', 'age', 'joined_time'], 'integer'],
            ['repeat_password', 'compare', 'compareAttribute' => 'password' , 'message' => 'Password confirm don\'t match'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
            ['email', 'email'],
            [['name', 'email'], 'string', 'max' => 100],

            [['password', 'repeat_password'], 'string', 'min'=> 8 ,'max' => 100],
            [['username', 'password','repeat_password', 'password_reset_token', 'user_image', 'about_me'], 'string', 'max' => 255],

            [['username', 'email'], 'unique', 'targetAttribute' => ['username', 'email'], 'message' => 'The combination of User Name and Email has already been taken.'],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['parent_id' => 'user_id']],
        ];
    }

    public function upload()
    {
        if (!$this->isNewRecord && !$this->imageFile) {
            $this->imageFile = $this->oldAttributes['user_image'];
            return true;
        }
        if ($this->imageFile) {
            $path = Yii::getAlias(Yii::$app->getModule('usermanagement')->imagesFolder);

            $this->imageFile->saveAs($path . $this->imageFile->baseName . '.' . $this->imageFile->extension);
            $this->user_image = Url::to(['/web/images/users/']).'/'.$this->imageFile->baseName . '.' . $this->imageFile->extension;
        }
    }

    public function beforeSave($insert)
    {
        $this->upload() ;
        if($this->isNewRecord)
            $this->password = Yii::$app->security->generatePasswordHash($this->password) ;

        if(!$this->isNewRecord && !empty($this->password))
            $this->password = Yii::$app->security->generatePasswordHash($this->password) ;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $groupMap = Yii::$app->request->post('UsergroupMap') ;

        if(!$this->isNewRecord)
        {
            UsergroupMap::deleteAll(['user_id'=>$this->user_id]);
        }

        if(isset($groupMap['group_id']))
            foreach ($groupMap['group_id'] as $groupId)
            {
                $attributes = null ;
                $groupMapModel = new UsergroupMap() ;
                $attributes = $groupMapModel->attributes = [
                    'user_id' => $this->user_id ,
                    'group_id'=> $groupId
                ];

                if(!$groupMapModel->save())
                    continue ;

            }
            else
            {
                $groupId = Usergroups::find()->where(['default'=>true])->one()->id ;
                if($groupId)
                {
                    $groupMapModel = new UsergroupMap() ;
                    $groupMapModel->attributes = [
                        'user_id' => $this->user_id ,
                        'group_id'=> $groupId
                    ];
                    $groupMapModel->save() ;
                }
            }

        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'user_id' => Yii::t('app', 'User ID'),
            'parent_id' => Yii::t('app', 'Parent'),
            'name' => Yii::t('app', 'Name'),
            'username' => Yii::t('app', 'User Name'),
            'password' => Yii::t('app', 'Password'),
            'repeat_password' => Yii::t('app', 'password repeat'),
            'password_reset_token' => Yii::t('app', 'Password Reset Token'),
            'user_image' => Yii::t('app', 'User Image'),
            'email' => Yii::t('app', 'Email'),
            'block' => Yii::t('app', 'Block'),
            'age' => Yii::t('app', 'Age'),
            'joined_time' => Yii::t('app', 'Joined Time'),
            'about_me' => Yii::t('app', 'About Me'),
        ];
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {

        return static::findOne(['user_id' => $id, 'block' => 0]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'block' =>0]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'block' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return ;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return ;
        //return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getModules()
    {
        return $this->hasMany(Modules::className(), ['added_user' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getModules0()
    {
        return $this->hasMany(Modules::className(), ['modified_user' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsergroupMaps()
    {
        return $this->hasMany(UsergroupMap::className(), ['user_id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(User::className(), ['user_id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsers()
    {
        return $this->hasMany(User::className(), ['parent_id' => 'user_id']);
    }


}
