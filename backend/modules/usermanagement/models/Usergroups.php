<?php

namespace app\modules\usermanagement\models;

use Yii;

/**
 * This is the model class for table "{{%usergroups}}".
 *
 * @property string $id
 * @property string $parent_id
 * @property string $title
 * @property integer $default
 *
 * @property UsergroupMap[] $usergroupMaps
 * @property Usergroups $parent
 * @property Usergroups[] $usergroups
 */
class Usergroups extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%usergroups}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['parent_id', 'default'], 'integer'],
            [['title'], 'required'],
            [['title' ], 'match', 'pattern' => '/^[A-Za-z0-9_~\-@\\^\(\)]+$/'] ,
            [['title'], 'string', 'max' => 255],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => Usergroups::className(), 'targetAttribute' => ['parent_id' => 'id']],
        ];
    }

    public function beforeSave($insert)
    {
        if($this->default && $oldDefault = self::find()->where(['default'=>true])->one())
        {
            $oldDefault->default = 0 ;
            $oldDefault->save();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub

    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'parent_id' => Yii::t('app', 'Parent'),
            'title' => Yii::t('app', 'Title'),
            'default' => Yii::t('app', 'Default'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsergroupMaps()
    {
        return $this->hasMany(UsergroupMap::className(), ['group_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(Usergroups::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsergroups()
    {
        return $this->hasMany(Usergroups::className(), ['parent_id' => 'id']);
    }
}
